     1                                  ; Se dau doua siruri de caractere ordonate alfabetic s1 si s2. Sa se construiasca prin interclasare sirul ordonat s3 care sa contina toate elementele din s1 si s2.
     2                                  
     3                                  bits 32 
     4                                  global start
     5                                  extern exit 
     6                                  import exit msvcrt.dll 
     7                                  segment data use32 class=data
     8                                  
     9 00000000 6164666D707A            s1 db 'a','d','f','m','p','z'
    10 00000006 6263676C6E6F            s2 db 'b','c','g','l','n','o'
    11                                  lung equ $-s1
    12                                  lung2 equ $-s2
    13                                  lung1 equ lung-lung2
    14 0000000C 00<rept>                s3 times lung db 0
    15                                    
    16                                  segment code use32 class=code
    17                                  start:
    18                                  
    19 00000000 B90C000000              mov ecx,lung
    20 00000005 BE00000000              mov esi,0                 ;se pune in esi s1
    21 0000000A BB00000000              mov ebx,0                 ;se pune in ebx s2
    22 0000000F BF[0C000000]            mov edi,s3                ;se pune in edi s3
    23 00000014 E360                    jecxz sfarsit
    24                                      repeta:
    25 00000016 83FE06                          cmp esi,lung1
    26 00000019 7429                                je ramas_s2   ;daca s1 are toate elementele deja in s3, se completeaza doar cu s2
    27 0000001B 83FB06                          cmp ebx,lung2
    28 0000001E 743C                                je ramas_s1   ;daca s2 are toate elementele deja in s3, se completeaza doar cu s1
    29                                              
    30 00000020 B800000000                      mov eax,0
    31 00000025 BA00000000                      mov edx,0
    32 0000002A 8A86[00000000]                  mov al, [s1+esi]  ;al primeste element din s1
    33 00000030 8A93[06000000]                  mov dl, [s2+ebx]  ;dl primeste element din s2
    34                                          
    35 00000036 38D0                            cmp al,dl
    36 00000038 7704                                ja mai_mare   
    37 0000003A AA                                  stosb         ;daca al<=dl in edi se pune elementul din al
    38 0000003B 46                                  inc esi
    39 0000003C EBD8                                jmp repeta
    40                                              
    41                                          mai_mare:         
    42 0000003E 8817                            mov [edi],dl      ;daca al>dl in edi se pune elementul din dl
    43 00000040 43                              inc ebx
    44 00000041 47                              inc edi
    45 00000042 EBD2                            jmp repeta        ;se repeta pana cand s1 sau s2 este gata
    46                                          
    47                                          ramas_s2:
    48 00000044 B906000000                          mov ecx,lung2 ;ce a ramas din s2 se adauga
    49 00000049 29D9                                sub ecx,ebx
    50                                              repeta2:
    51 0000004B B800000000                              mov eax,0
    52 00000050 8A83[06000000]                          mov al, [s2+ebx]
    53 00000056 AA                                      stosb
    54 00000057 43                                      inc ebx
    55 00000058 E2F1                                loop repeta2
    56 0000005A EB1A                                jmp sfarsit
    57                                              
    58                                          ramas_s1:
    59 0000005C B906000000                          mov ecx,lung1  ;ce a ramas din s1 se adauga
    60 00000061 29F1                                sub ecx,esi
    61                                              repeta3:
    62 00000063 B800000000                              mov eax,0
    63 00000068 8A86[00000000]                          mov al, [s1+esi]
    64 0000006E AA                                      stosb
    65 0000006F 46                                      inc esi
    66 00000070 E2F1                                loop repeta3  
    67                                              
    68 00000072 EB02                            jmp sfarsit
    69 00000074 E2A0                        loop repeta
    70                                  sfarsit:
    71                                  
    72 00000076 6A00                    push dword 0 
    73 00000078 FF15[00000000]          call [exit] 
